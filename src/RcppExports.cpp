// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cos_approx
double cos_approx(double x);
RcppExport SEXP _priceT_cos_approx(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cos_approx(x));
    return rcpp_result_gen;
END_RCPP
}
// loc1temp
Rcpp::NumericVector loc1temp(Rcpp::NumericVector params, Rcpp::NumericVector t, Rcpp::NumericVector loc1temperatures);
RcppExport SEXP _priceT_loc1temp(SEXP paramsSEXP, SEXP tSEXP, SEXP loc1temperaturesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type loc1temperatures(loc1temperaturesSEXP);
    rcpp_result_gen = Rcpp::wrap(loc1temp(params, t, loc1temperatures));
    return rcpp_result_gen;
END_RCPP
}
// loc1optim
Rcpp::NumericVector loc1optim(Rcpp::NumericVector initial, Rcpp::NumericVector t, Rcpp::NumericVector loc1temperatures);
RcppExport SEXP _priceT_loc1optim(SEXP initialSEXP, SEXP tSEXP, SEXP loc1temperaturesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type t(tSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type loc1temperatures(loc1temperaturesSEXP);
    rcpp_result_gen = Rcpp::wrap(loc1optim(initial, t, loc1temperatures));
    return rcpp_result_gen;
END_RCPP
}
// seasonal_cpp
Rcpp::List seasonal_cpp(Rcpp::NumericVector temp);
RcppExport SEXP _priceT_seasonal_cpp(SEXP tempSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type temp(tempSEXP);
    rcpp_result_gen = Rcpp::wrap(seasonal_cpp(temp));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_priceT_cos_approx", (DL_FUNC) &_priceT_cos_approx, 1},
    {"_priceT_loc1temp", (DL_FUNC) &_priceT_loc1temp, 3},
    {"_priceT_loc1optim", (DL_FUNC) &_priceT_loc1optim, 3},
    {"_priceT_seasonal_cpp", (DL_FUNC) &_priceT_seasonal_cpp, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_priceT(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
